@use 'sass:color';
@use 'sass:list';
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';

$_white: #ffffff;
$_black: #000000;
$_wcag-aa: 4.5;
$_wcag-aaa: 7;
$_hue-red-start: 20;
$_hue-red-end: 40;
$_hue-green-start: 120;
$_hue-green-end: 180;
$_hue-yellow-start: 90;
$_hue-yellow-end: 100;
$_hue-blue-start: 190;
$_hue-blue-end: 250;

$_iteration-limit: 100;

@function _mixColorsToRemoveOpacity($foreground, $background) {
	$fully-opaque: color.change($foreground, $alpha: 1);
	$opacity: color.opacity($foreground) * 100%;

	@return color.mix($fully-opaque, $background, $opacity, oklch);
}

@function _contrast($foreground, $background) {
	$foreground: color.to-space($foreground, oklch);
	$background: color.to-space($background, oklch);

	// Replace opacity in the background with a mix of background and white
	$background: _mixColorsToRemoveOpacity($background, $_white);

	// Replace opacity in foreground with a mix of the foreground and background
	$foreground: _mixColorsToRemoveOpacity($foreground, $background);

	$foreground-luminance: color.channel($foreground, 'lightness');
	$background-luminance: color.channel($background, 'lightness');

	@if ($foreground-luminance > $background-luminance) {
		@return math.div(
			($foreground-luminance + 0.05),
			($background-luminance + 0.05)
		);
	} @else {
		@return math.div(
			($background-luminance + 0.05),
			($foreground-luminance + 0.05)
		);
	}
}

@function _adjustContrast(
	$foreground: $_black,
	$background: $_white,
	$target-contrast: $_wcag-aaa,
	$property: lightness
) {
	$direction: 1;
	$current-value: 1%;

	// Set the selected property to 1%
	$foreground: color.change($foreground, $lightness: $current-value);
	$contrast: _contrast($foreground, $background);

	// If the _contrast is high, set the property to 99% and set direction to -1
	@if ($contrast >= $target-contrast) {
		$current-value: 99%;
		$direction: -1;
		$foreground: color.change($foreground, $lightness: $current-value);
	}

	// increase the property by the increment until the _contrast is greater than or equal to the target _contrast
	@for $i from 1 through $_iteration-limit {
		$contrast: _contrast($foreground, $background);
		@if ($contrast >= $target-contrast) {
			@return $foreground;
		}

		$new-value: $current-value + $i * $direction;

		@if ($new-value < 0 or $new-value > 100) {
			@warn 'Contrast could not be achieved';
			@return $foreground;
		}

		$foreground: color.change(
			$foreground,
			$lightness: $current-value + $i * $direction
		);
	}

	@return $foreground;
}

@function _getShades($color, $stops, $ending-lightness: 5%) {
	$starting-lightness: color.channel($color, 'lightness', $space: oklch);

	$colors: ();

	@for $i from 1 through $stops {
		$new_lightness: $starting-lightness +
			math.div(($ending-lightness - $starting-lightness), $stops) *
			$i;
		$color: color.change($color, $lightness: $new_lightness);
		$colors: list.append($colors, $color);
	}

	@return $colors;
}

@function _getTints($color, $stops, $ending-lightness: 95%) {
	$starting-lightness: color.channel($color, 'lightness', $space: oklch);

	$colors: ();

	@for $i from 1 through $stops {
		$new_lightness: $ending-lightness - math.div(
				($ending-lightness - $starting-lightness),
				$stops
			) *
			$i;
		$color: color.change($color, $lightness: $new_lightness);
		$colors: list.append($colors, $color);
	}

	@return $colors;
}

@function _getRoundNumber($stops) {
	$round: 100;
	@if $stops > 10 {
		$round: 50;
	}
	@if $stops > 20 {
		$round: 25;
	}
	@if $stops > 40 {
		$round: 10;
	}
	@if $stops > 80 {
		$round: 5;
	}
	@if $stops > 160 {
		$round: 1;
	}

	@return $round;
}

@mixin _evenlySpacedPalette($label, $color, $stops) {
	$end-label-number: 900;
	$round: _getRoundNumber($stops);
	$colors: _getShades($color, $stops);

	$i: 0;
	@each $color in $colors {
		$i: $i + 1;
		$label-number: math.div($end-label-number, $stops) * $i;
		// round label number to nearest 10
		$label-number: math.round(math.div($label-number, $round)) * $round;
		--palette-#{$label}-#{$label-number}: #{color.to-space($color, oklch)};
	}
}

@mixin _paletteWithStartAtMiddle($label, $color, $stops) {
	$end-label-number: 900;
	$round: _getRoundNumber($stops);

	$half-of-stops: math.div($stops, 2);

	$tint_count: math.ceil($half-of-stops);
	$shade_count: math.floor($half-of-stops);

	$tints: _getTints($color, $tint_count);
	$shades: _getShades($color, $shade_count);

	$colors: ();

	@each $tint in $tints {
		$colors: list.append($colors, $tint);
	}
	@each $shade in $shades {
		$colors: list.append($colors, $shade);
	}

	$i: 0;
	@each $color in $colors {
		$i: $i + 1;
		$label-number: math.div($end-label-number, $stops) * $i;
		// round label number to nearest 10
		$label-number: math.round(math.div($label-number, $round)) * $round;
		--palette-#{$label}-#{$label-number}: #{color.to-space($color, oklch)};
	}
}

@function _shiftToWithinRange($color, $min, $max) {
	$color: color.to-space($color, oklch);
	$total-degrees: 360;
	$hue: color.channel($color, 'hue');

	// If already in the specified range, return the color
	@if $hue >= $min and $hue <= $max {
		@return $color;
	}

	$distance-to-max: $hue - $max;
	$distance-to-min: $min - $hue;

	// Fix if the hue needs to wrap at 360/0
	@if $distance-to-max < 0 {
		$distance-to-max: $distance-to-max + $total-degrees;
	}
	@if $distance-to-max > $total-degrees {
		$distance-to-max: $distance-to-max - $total-degrees;
	}

	@if $distance-to-min < 0 {
		$distance-to-min: $distance-to-min + $total-degrees;
	}
	@if $distance-to-min > $total-degrees {
		$distance-to-min: $distance-to-min - $total-degrees;
	}

	// Adjust hue to the nearest boundary
	@if $distance-to-max < $distance-to-min {
		$hue: $max;
	} @else {
		$hue: $min;
	}

	@return color.change($color, $hue: $hue);
}

@mixin create($primary, $accent) {
	// Convert colors to oklch
	$primary: color.to-space($primary, oklch);
	$accent: color.to-space($accent, oklch);

	$vibrant-start: $primary;
	@if (color.channel($vibrant-start, 'chroma') < 50%) {
		$vibrant-start: color.change($vibrant-start, $chroma: 50%);
	}
	@if (color.channel($vibrant-start, 'lightness') < 40%) {
		$vibrant-start: color.change($vibrant-start, $lightness: 40%);
	}

	// Create starting colors
	$neutral: color.change($primary, $chroma: 8%, $lightness: 95%);
	$primary: _adjustContrast($primary, $_white, $_wcag-aa);
	$accent: _adjustContrast($accent, $_white, $_wcag-aa);
	$danger: _shiftToWithinRange(
		$vibrant-start,
		$_hue-red-start,
		$_hue-red-end
	);
	$success: _shiftToWithinRange(
		$vibrant-start,
		$_hue-green-start,
		$_hue-green-end
	);
	$warning: _shiftToWithinRange(
		$vibrant-start,
		$_hue-yellow-start,
		$_hue-yellow-end
	);
	$info: _shiftToWithinRange(
		$vibrant-start,
		$_hue-blue-start,
		$_hue-blue-end
	);

	// Create / add color vars
	:root {
		@include _paletteWithStartAtMiddle('primary', $primary, 9);
		@include _paletteWithStartAtMiddle('accent', $accent, 9);
		@include _evenlySpacedPalette('neutral', $neutral, 9);
		@include _paletteWithStartAtMiddle('danger', $danger, 5);
		@include _paletteWithStartAtMiddle('success', $success, 5);
		@include _paletteWithStartAtMiddle('warning', $warning, 5);
		@include _paletteWithStartAtMiddle('info', $info, 5);
	}
}
